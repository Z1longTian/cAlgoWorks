using System;
using System.Collections.Generic;
using cAlgo.API;
using cAlgo.API.Internals;

namespace cAlgo.Plugins;

[Plugin(AccessRights = AccessRights.None)]
public class DataWindow : Plugin {

    // variables
    private AspTab _datawindow; // ActiveSymbolPanel tab 
    private StackPanel _container; // container for datawindow
    private Grid _data; // data grid
    private Grid _indicators; // indicators grid
    
    // data labels
    private readonly List<string> _datalabels = new List<string> {
        "Symbol", "Date", "Time", "Open", "High", "Low", "Close", "Size", "Tick Volume", "Spread", "Trading Session", "Pip Size"
    };
    private readonly List<TextBlock> _datatextblocks = new List<TextBlock>(); // data values
    
    // indicator labels
    private readonly List<string> _indicatorlabels = new List<string>();
    private readonly List<TextBlock> _indicatortextblocks = new List<TextBlock>();
    
    // style control variables
    private readonly int _textblockLength = 120;
    
    // ToDos
    // 1. styles - * Border overlaying problem from each textblocks
    // 2. when index is not valid, show default values => active frame chart's values, and also keep updating values using bars event.
    // 3. adding 0s according to the pip size
    // 6. Trading session using a different handler
    // 7. adding a new textblock pipsize? - really needed?
    // 8. maybe adding current bid & ask of the symbol where mouse is moving at
    // 9. reorder textblocks
    
    protected override void OnStart() {
        // asp setup
        _datawindow = Asp.AddTab("Data Window"); // add a new tab to asp
        _datawindow.Index = 1; // set the tab index, next to SymbolTab
        // event handlers setup
        ChartManager.FramesAdded += FramesAdded; // handle new added frames
        ChartManager.FramesRemoved += FramesRemoved; // handle removed frames
        // adding MouseMove event handler to all chart frames
        foreach (ChartContainer cc in ChartManager.ChartContainers) {
            for (int i = 0; i < cc.Count; i++) {
                if (cc[i] is ChartFrame chartframe) {
                    chartframe.Chart.MouseEnter += MouseEnter;
                    chartframe.Chart.MouseMove += MouseMove;
                    chartframe.Chart.MouseLeave += MouseLeave;
                }
            }
        }

        // container for data window
        _container = new StackPanel()
        {
            MinWidth = _textblockLength * 2 + 50,
            HorizontalAlignment = HorizontalAlignment.Center,
        };

        // adding data section
        _data = new Grid(0, 2); // create data grid
        _container.AddChild(Title("Data"));
        foreach (string label in _datalabels)
        {
            TextBlock value = Value();
            _datatextblocks.Add(value);
            AddRow(_data, Border(Label(label)), Border(value));
        };

        // adding indicators section
        _indicators = new Grid(0, 2); // create indicators grid
        AddRow(_indicators, Title("Indicators"));

        _container.AddChild(_data);
        _container.AddChild(_indicators);
        _datawindow.Child = _container;
        // update textblocks for first time
        SyncToActiveFrame();
    }

    

    // event handlers
    // MouseMove event - getting new index
    private void MouseMove(ChartMouseEventArgs obj) {
        int i = (int)obj.BarIndex;
        Chart chart = obj.Chart;
        chart.ResetBarColors();
        Bars bars = MarketData.GetBars(chart.TimeFrame, chart.SymbolName);
        if(i > 0 && i < bars.Count) {
            Bar target = bars[i];
            chart.SetBarOutlineColor(i, Color.Yellow);
            UpdateData(chart,target);
        } else {
            SyncToActiveFrame();
        }
    }
    private void MouseEnter(ChartMouseEventArgs obj) { // can handle some data, like pip size

    }
    private void MouseLeave(ChartMouseEventArgs obj) {
        // start bar color reset timer, 100 = 0.1s
        // using this because if mouse leave chart too quickly, resetcolor won't work
        new System.Threading.Timer(ResetBarColorsTimer, new { obj.Chart }, 100, System.Threading.Timeout.Infinite);
    }
    // reset bar colors after 0.1s
    private void ResetBarColorsTimer(object state) =>
        BeginInvokeOnMainThread(() => {
            ((dynamic)state).Chart.ResetBarColors();
        });
    
    // add MouseMove event to new frames
    private void FramesAdded(FramesAddedEventArgs obj) {
        foreach(Frame frame in obj.AddedFrames) {
            if(frame is ChartFrame chartframe) {
                chartframe.Chart.MouseMove += MouseMove;
            }
        }
    }
    // remove MouseMove event from frames
    private void FramesRemoved(FramesRemovedEventArgs obj) {
        foreach(Frame frame in obj.RemovedFrames) {
            if(frame is ChartFrame chartframe) {
                chartframe.Chart.MouseMove -= MouseMove;
            }
        }
    }

    // ui control methods
    private ControlBase Border(ControlBase control) => new Border {
        Child = control,
        BorderThickness = new Thickness(1),
        //BorderColor = Color.FromHex("#FCFAEE"),
        Padding = new Thickness(5),
    };
    private TextBlock Title(string text = "-") => new TextBlock {
        Text = text,
        FontSize = 11,
        FontStyle = FontStyle.Italic,
        FontWeight = FontWeight.UltraBold,
        FontFamily = "Consolas",
        Opacity = 0.8,
        Margin = new Thickness(0, 10, 0, 5),
    };
     private TextBlock Label(string text = "-") => new TextBlock {
        Text = text,
        TextAlignment = TextAlignment.Left,
        MinWidth = _textblockLength,
        Margin = new Thickness(10, 0, 0, 0),
    };
    private TextBlock Value(string text = "-") => new TextBlock {
        Text = text,
        TextAlignment = TextAlignment.Right,
        MinWidth = _textblockLength,
        Margin = new Thickness(0, 0, 10, 0),
    };

   
    
    private void AddRow(Grid grid, ControlBase child) {
        int i = grid.AddRow().Index;
        grid.AddChild(child, i, 0);
    }
    
    private void AddRow(Grid grid, ControlBase row_item, ControlBase col_item) {
        int i = grid.AddRow().Index;
        grid.AddChild(row_item, i, 0);
        grid.AddChild(col_item, i, 1);
    }
    
    //"Symbol", "Date", "Time", "Open", "High", "Low", "Close", "Size", "Tick Volume", "Spread", "Pip Size"
    // utility methods
    private void UpdateData(Chart chart, Bar bar) {
        _datatextblocks[0].Text = $"{chart.Symbol.Name}, {chart.TimeFrame.ShortName}";           // symbol name
        _datatextblocks[1].Text = bar.OpenTime.ToLocalTime().ToString("yyyy/MM/dd");             // open date
        _datatextblocks[2].Text = bar.OpenTime.ToLocalTime().TimeOfDay.ToString();               // open time
        _datatextblocks[3].Text = bar.Open.ToString();                                           // open
        _datatextblocks[4].Text = bar.High.ToString();                                           // high
        _datatextblocks[5].Text = bar.Low.ToString();                                            // low
        _datatextblocks[6].Text = bar.Close.ToString();                                          // close
        _datatextblocks[7].Text = ToPips(bar.Close - bar.Open, chart.Symbol.PipSize).ToString(); // size
        _datatextblocks[8].Text = bar.TickVolume.ToString();                                     // tickvolume
        _datatextblocks[9].Text = ToPips(chart.Symbol.Spread, chart.Symbol.PipSize).ToString();  // spread
        _datatextblocks[10].Text = MarketSessions.ToString();                                    // market sessions
        _datatextblocks[11].Text = chart.Symbol.PipSize.ToString();                              // pip size
    }
    
    // convert value to pips
    private double ToPips(double val, double pipsize) => Math.Round(val/pipsize, 1);
    
    // update data from active frame
    private void SyncToActiveFrame() {
        if (ChartManager.ActiveFrame is ChartFrame active) {
            UpdateData(active.Chart, MarketData.GetBars(active.Chart.TimeFrame, active.Chart.SymbolName).LastBar);
        }
    }
}        
